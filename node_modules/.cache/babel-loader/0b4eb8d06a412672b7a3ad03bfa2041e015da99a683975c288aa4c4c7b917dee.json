{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carlos1\\\\Documents\\\\DEV\\\\New\\\\kanban\\\\src\\\\context\\\\KanbanContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Estado inicial do Kanban\nconst defaultState = {\n  tasks: {},\n  columns: {\n    'column-1': {\n      id: 'column-1',\n      title: 'A fazer',\n      taskIds: []\n    },\n    'column-2': {\n      id: 'column-2',\n      title: 'Em andamento',\n      taskIds: []\n    },\n    'column-3': {\n      id: 'column-3',\n      title: 'Concluído',\n      taskIds: []\n    }\n  },\n  columnOrder: ['column-1', 'column-2', 'column-3']\n};\n\n// Carregar estado do localStorage ou usar o padrão\nconst loadFromLocalStorage = () => {\n  try {\n    const savedState = localStorage.getItem('kanbanState');\n    if (savedState) {\n      return JSON.parse(savedState);\n    }\n  } catch (error) {\n    console.error('Erro ao carregar estado do localStorage:', error);\n  }\n  return defaultState;\n};\nconst initialState = loadFromLocalStorage();\n\n// Tipos de ações\n\n// Reducer para gerenciar o estado\nconst kanbanReducer = (state, action) => {\n  let newState = state;\n  switch (action.type) {\n    case 'ADD_TASK':\n      {\n        const {\n          columnId,\n          content,\n          description,\n          priority,\n          dueDate,\n          tags\n        } = action.payload;\n        const taskId = uuidv4();\n        const newTask = {\n          id: taskId,\n          content,\n          description,\n          priority,\n          dueDate,\n          tags: tags || []\n        };\n        const column = state.columns[columnId];\n        const newTaskIds = [...column.taskIds, taskId];\n        newState = {\n          ...state,\n          tasks: {\n            ...state.tasks,\n            [taskId]: newTask\n          },\n          columns: {\n            ...state.columns,\n            [columnId]: {\n              ...column,\n              taskIds: newTaskIds\n            }\n          }\n        };\n        break;\n      }\n    case 'MOVE_TASK':\n      {\n        const {\n          source,\n          destination\n        } = action.payload;\n\n        // Se não houver destino, não faz nada\n        if (!destination) {\n          return state;\n        }\n\n        // Se a origem e o destino forem iguais, não faz nada\n        if (source.columnId === destination.columnId && source.index === destination.index) {\n          return state;\n        }\n        const sourceColumn = state.columns[source.columnId];\n        const destinationColumn = state.columns[destination.columnId];\n\n        // Mover na mesma coluna\n        if (source.columnId === destination.columnId) {\n          const newTaskIds = [...sourceColumn.taskIds];\n          const [removed] = newTaskIds.splice(source.index, 1);\n          newTaskIds.splice(destination.index, 0, removed);\n          newState = {\n            ...state,\n            columns: {\n              ...state.columns,\n              [source.columnId]: {\n                ...sourceColumn,\n                taskIds: newTaskIds\n              }\n            }\n          };\n        } else {\n          // Mover entre colunas diferentes\n          const sourceTaskIds = [...sourceColumn.taskIds];\n          const [removed] = sourceTaskIds.splice(source.index, 1);\n          const destinationTaskIds = [...destinationColumn.taskIds];\n          destinationTaskIds.splice(destination.index, 0, removed);\n          newState = {\n            ...state,\n            columns: {\n              ...state.columns,\n              [source.columnId]: {\n                ...sourceColumn,\n                taskIds: sourceTaskIds\n              },\n              [destination.columnId]: {\n                ...destinationColumn,\n                taskIds: destinationTaskIds\n              }\n            }\n          };\n        }\n        break;\n      }\n    case 'UPDATE_TASK':\n      {\n        const {\n          taskId,\n          content,\n          description,\n          priority,\n          dueDate,\n          tags\n        } = action.payload;\n        newState = {\n          ...state,\n          tasks: {\n            ...state.tasks,\n            [taskId]: {\n              ...state.tasks[taskId],\n              ...(content !== undefined && {\n                content\n              }),\n              ...(description !== undefined && {\n                description\n              }),\n              ...(priority !== undefined && {\n                priority\n              }),\n              ...(dueDate !== undefined && {\n                dueDate\n              }),\n              ...(tags !== undefined && {\n                tags\n              })\n            }\n          }\n        };\n        break;\n      }\n    case 'DELETE_TASK':\n      {\n        const {\n          taskId,\n          columnId\n        } = action.payload;\n        const column = state.columns[columnId];\n        const newTaskIds = column.taskIds.filter(id => id !== taskId);\n        const {\n          [taskId]: _,\n          ...remainingTasks\n        } = state.tasks;\n        newState = {\n          ...state,\n          tasks: remainingTasks,\n          columns: {\n            ...state.columns,\n            [columnId]: {\n              ...column,\n              taskIds: newTaskIds\n            }\n          }\n        };\n        break;\n      }\n    case 'ADD_COLUMN':\n      {\n        const {\n          title\n        } = action.payload;\n        const newColumnId = uuidv4();\n        newState = {\n          ...state,\n          columns: {\n            ...state.columns,\n            [newColumnId]: {\n              id: newColumnId,\n              title,\n              taskIds: []\n            }\n          },\n          columnOrder: [...state.columnOrder, newColumnId]\n        };\n        break;\n      }\n    case 'UPDATE_COLUMN':\n      {\n        const {\n          columnId,\n          title\n        } = action.payload;\n        newState = {\n          ...state,\n          columns: {\n            ...state.columns,\n            [columnId]: {\n              ...state.columns[columnId],\n              title\n            }\n          }\n        };\n        break;\n      }\n    case 'DELETE_COLUMN':\n      {\n        const {\n          columnId\n        } = action.payload;\n        const column = state.columns[columnId];\n\n        // Remover todas as tarefas da coluna\n        const newTasks = {\n          ...state.tasks\n        };\n        column.taskIds.forEach(taskId => {\n          delete newTasks[taskId];\n        });\n        const {\n          [columnId]: _,\n          ...remainingColumns\n        } = state.columns;\n        const newColumnOrder = state.columnOrder.filter(id => id !== columnId);\n        newState = {\n          ...state,\n          tasks: newTasks,\n          columns: remainingColumns,\n          columnOrder: newColumnOrder\n        };\n        break;\n      }\n    case 'ADD_TAG':\n      {\n        const {\n          taskId,\n          tag\n        } = action.payload;\n        const task = state.tasks[taskId];\n        const existingTags = task.tags || [];\n        if (!existingTags.includes(tag)) {\n          newState = {\n            ...state,\n            tasks: {\n              ...state.tasks,\n              [taskId]: {\n                ...task,\n                tags: [...existingTags, tag]\n              }\n            }\n          };\n        } else {\n          return state;\n        }\n        break;\n      }\n    case 'REMOVE_TAG':\n      {\n        const {\n          taskId,\n          tag\n        } = action.payload;\n        const task = state.tasks[taskId];\n        const existingTags = task.tags || [];\n        newState = {\n          ...state,\n          tasks: {\n            ...state.tasks,\n            [taskId]: {\n              ...task,\n              tags: existingTags.filter(t => t !== tag)\n            }\n          }\n        };\n        break;\n      }\n    case 'IMPORT_DATA':\n      {\n        newState = action.payload.data;\n        break;\n      }\n    default:\n      return state;\n  }\n\n  // Salvar no localStorage após cada ação\n  try {\n    localStorage.setItem('kanbanState', JSON.stringify(newState));\n  } catch (error) {\n    console.error('Erro ao salvar estado no localStorage:', error);\n  }\n  return newState;\n};\n\n// Interface do contexto\n\n// Criação do contexto\nconst KanbanContext = /*#__PURE__*/createContext(undefined);\n\n// Provider component\n\nexport const KanbanProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(kanbanReducer, initialState);\n  const exportData = () => {\n    const dataStr = JSON.stringify(state, null, 2);\n    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;\n\n    // Criar um link temporário para download\n    const exportFileDefaultName = `kanban-backup-${new Date().toISOString().slice(0, 10)}.json`;\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  };\n  const importData = jsonData => {\n    try {\n      const data = JSON.parse(jsonData);\n      dispatch({\n        type: 'IMPORT_DATA',\n        payload: {\n          data\n        }\n      });\n    } catch (error) {\n      console.error('Erro ao importar dados:', error);\n      alert('Formato de arquivo inválido. Por favor, selecione um arquivo JSON válido.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(KanbanContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      exportData,\n      importData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 357,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook para usar o contexto\n_s(KanbanProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = KanbanProvider;\nexport const useKanban = () => {\n  _s2();\n  const context = useContext(KanbanContext);\n  if (!context) {\n    throw new Error('useKanban deve ser usado dentro de um KanbanProvider');\n  }\n  return context;\n};\n_s2(useKanban, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"KanbanProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","v4","uuidv4","jsxDEV","_jsxDEV","defaultState","tasks","columns","id","title","taskIds","columnOrder","loadFromLocalStorage","savedState","localStorage","getItem","JSON","parse","error","console","initialState","kanbanReducer","state","action","newState","type","columnId","content","description","priority","dueDate","tags","payload","taskId","newTask","column","newTaskIds","source","destination","index","sourceColumn","destinationColumn","removed","splice","sourceTaskIds","destinationTaskIds","undefined","filter","_","remainingTasks","newColumnId","newTasks","forEach","remainingColumns","newColumnOrder","tag","task","existingTags","includes","t","data","setItem","stringify","KanbanContext","KanbanProvider","children","_s","dispatch","exportData","dataStr","dataUri","encodeURIComponent","exportFileDefaultName","Date","toISOString","slice","linkElement","document","createElement","setAttribute","click","importData","jsonData","alert","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useKanban","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Carlos1/Documents/DEV/New/kanban/src/context/KanbanContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, ReactNode } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { KanbanState, Task } from '../types/types';\n\n// Estado inicial do Kanban\nconst defaultState: KanbanState = {\n  tasks: {},\n  columns: {\n    'column-1': {\n      id: 'column-1',\n      title: 'A fazer',\n      taskIds: [],\n    },\n    'column-2': {\n      id: 'column-2',\n      title: 'Em andamento',\n      taskIds: [],\n    },\n    'column-3': {\n      id: 'column-3',\n      title: 'Concluído',\n      taskIds: [],\n    },\n  },\n  columnOrder: ['column-1', 'column-2', 'column-3'],\n};\n\n// Carregar estado do localStorage ou usar o padrão\nconst loadFromLocalStorage = (): KanbanState => {\n  try {\n    const savedState = localStorage.getItem('kanbanState');\n    if (savedState) {\n      return JSON.parse(savedState);\n    }\n  } catch (error) {\n    console.error('Erro ao carregar estado do localStorage:', error);\n  }\n  return defaultState;\n};\n\nconst initialState = loadFromLocalStorage();\n\n// Tipos de ações\ntype KanbanAction =\n  | { type: 'ADD_TASK'; payload: { columnId: string; content: string; description?: string; priority?: 'baixa' | 'média' | 'alta', dueDate?: Date, tags?: string[] } }\n  | { type: 'MOVE_TASK'; payload: { source: { columnId: string, index: number }, destination: { columnId: string, index: number } } }\n  | { type: 'UPDATE_TASK'; payload: { taskId: string; content?: string; description?: string; priority?: 'baixa' | 'média' | 'alta', dueDate?: Date, tags?: string[] } }\n  | { type: 'DELETE_TASK'; payload: { taskId: string; columnId: string } }\n  | { type: 'ADD_COLUMN'; payload: { title: string } }\n  | { type: 'UPDATE_COLUMN'; payload: { columnId: string; title: string } }\n  | { type: 'DELETE_COLUMN'; payload: { columnId: string } }\n  | { type: 'ADD_TAG'; payload: { taskId: string; tag: string } }\n  | { type: 'REMOVE_TAG'; payload: { taskId: string; tag: string } }\n  | { type: 'EXPORT_DATA'; }\n  | { type: 'IMPORT_DATA'; payload: { data: KanbanState } };\n\n// Reducer para gerenciar o estado\nconst kanbanReducer = (state: KanbanState, action: KanbanAction): KanbanState => {\n  let newState = state;\n\n  switch (action.type) {\n    case 'ADD_TASK': {\n      const { columnId, content, description, priority, dueDate, tags } = action.payload;\n      const taskId = uuidv4();\n      const newTask: Task = {\n        id: taskId,\n        content,\n        description,\n        priority,\n        dueDate,\n        tags: tags || [],\n      };\n\n      const column = state.columns[columnId];\n      const newTaskIds = [...column.taskIds, taskId];\n\n      newState = {\n        ...state,\n        tasks: {\n          ...state.tasks,\n          [taskId]: newTask,\n        },\n        columns: {\n          ...state.columns,\n          [columnId]: {\n            ...column,\n            taskIds: newTaskIds,\n          },\n        },\n      };\n      break;\n    }\n\n    case 'MOVE_TASK': {\n      const { source, destination } = action.payload;\n      \n      // Se não houver destino, não faz nada\n      if (!destination) {\n        return state;\n      }\n\n      // Se a origem e o destino forem iguais, não faz nada\n      if (\n        source.columnId === destination.columnId &&\n        source.index === destination.index\n      ) {\n        return state;\n      }\n\n      const sourceColumn = state.columns[source.columnId];\n      const destinationColumn = state.columns[destination.columnId];\n      \n      // Mover na mesma coluna\n      if (source.columnId === destination.columnId) {\n        const newTaskIds = [...sourceColumn.taskIds];\n        const [removed] = newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, removed);\n\n        newState = {\n          ...state,\n          columns: {\n            ...state.columns,\n            [source.columnId]: {\n              ...sourceColumn,\n              taskIds: newTaskIds,\n            },\n          },\n        };\n      } else {\n        // Mover entre colunas diferentes\n        const sourceTaskIds = [...sourceColumn.taskIds];\n        const [removed] = sourceTaskIds.splice(source.index, 1);\n        \n        const destinationTaskIds = [...destinationColumn.taskIds];\n        destinationTaskIds.splice(destination.index, 0, removed);\n\n        newState = {\n          ...state,\n          columns: {\n            ...state.columns,\n            [source.columnId]: {\n              ...sourceColumn,\n              taskIds: sourceTaskIds,\n            },\n            [destination.columnId]: {\n              ...destinationColumn,\n              taskIds: destinationTaskIds,\n            },\n          },\n        };\n      }\n      break;\n    }\n\n    case 'UPDATE_TASK': {\n      const { taskId, content, description, priority, dueDate, tags } = action.payload;\n      \n      newState = {\n        ...state,\n        tasks: {\n          ...state.tasks,\n          [taskId]: {\n            ...state.tasks[taskId],\n            ...(content !== undefined && { content }),\n            ...(description !== undefined && { description }),\n            ...(priority !== undefined && { priority }),\n            ...(dueDate !== undefined && { dueDate }),\n            ...(tags !== undefined && { tags }),\n          },\n        },\n      };\n      break;\n    }\n\n    case 'DELETE_TASK': {\n      const { taskId, columnId } = action.payload;\n      const column = state.columns[columnId];\n      const newTaskIds = column.taskIds.filter(id => id !== taskId);\n      \n      const { [taskId]: _, ...remainingTasks } = state.tasks;\n\n      newState = {\n        ...state,\n        tasks: remainingTasks,\n        columns: {\n          ...state.columns,\n          [columnId]: {\n            ...column,\n            taskIds: newTaskIds,\n          },\n        },\n      };\n      break;\n    }\n\n    case 'ADD_COLUMN': {\n      const { title } = action.payload;\n      const newColumnId = uuidv4();\n      \n      newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [newColumnId]: {\n            id: newColumnId,\n            title,\n            taskIds: [],\n          },\n        },\n        columnOrder: [...state.columnOrder, newColumnId],\n      };\n      break;\n    }\n\n    case 'UPDATE_COLUMN': {\n      const { columnId, title } = action.payload;\n      \n      newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [columnId]: {\n            ...state.columns[columnId],\n            title,\n          },\n        },\n      };\n      break;\n    }\n\n    case 'DELETE_COLUMN': {\n      const { columnId } = action.payload;\n      const column = state.columns[columnId];\n      \n      // Remover todas as tarefas da coluna\n      const newTasks = { ...state.tasks };\n      column.taskIds.forEach(taskId => {\n        delete newTasks[taskId];\n      });\n      \n      const { [columnId]: _, ...remainingColumns } = state.columns;\n      const newColumnOrder = state.columnOrder.filter(id => id !== columnId);\n\n      newState = {\n        ...state,\n        tasks: newTasks,\n        columns: remainingColumns,\n        columnOrder: newColumnOrder,\n      };\n      break;\n    }\n\n    case 'ADD_TAG': {\n      const { taskId, tag } = action.payload;\n      const task = state.tasks[taskId];\n      const existingTags = task.tags || [];\n      \n      if (!existingTags.includes(tag)) {\n        newState = {\n          ...state,\n          tasks: {\n            ...state.tasks,\n            [taskId]: {\n              ...task,\n              tags: [...existingTags, tag],\n            },\n          },\n        };\n      } else {\n        return state;\n      }\n      break;\n    }\n\n    case 'REMOVE_TAG': {\n      const { taskId, tag } = action.payload;\n      const task = state.tasks[taskId];\n      const existingTags = task.tags || [];\n      \n      newState = {\n        ...state,\n        tasks: {\n          ...state.tasks,\n          [taskId]: {\n            ...task,\n            tags: existingTags.filter(t => t !== tag),\n          },\n        },\n      };\n      break;\n    }\n\n    case 'IMPORT_DATA': {\n      newState = action.payload.data;\n      break;\n    }\n\n    default:\n      return state;\n  }\n\n  // Salvar no localStorage após cada ação\n  try {\n    localStorage.setItem('kanbanState', JSON.stringify(newState));\n  } catch (error) {\n    console.error('Erro ao salvar estado no localStorage:', error);\n  }\n\n  return newState;\n};\n\n// Interface do contexto\ninterface KanbanContextProps {\n  state: KanbanState;\n  dispatch: React.Dispatch<KanbanAction>;\n  exportData: () => void;\n  importData: (data: string) => void;\n}\n\n// Criação do contexto\nconst KanbanContext = createContext<KanbanContextProps | undefined>(undefined);\n\n// Provider component\ninterface KanbanProviderProps {\n  children: ReactNode;\n}\n\nexport const KanbanProvider: React.FC<KanbanProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(kanbanReducer, initialState);\n\n  const exportData = () => {\n    const dataStr = JSON.stringify(state, null, 2);\n    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;\n    \n    // Criar um link temporário para download\n    const exportFileDefaultName = `kanban-backup-${new Date().toISOString().slice(0, 10)}.json`;\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  };\n\n  const importData = (jsonData: string) => {\n    try {\n      const data = JSON.parse(jsonData) as KanbanState;\n      dispatch({\n        type: 'IMPORT_DATA',\n        payload: { data },\n      });\n    } catch (error) {\n      console.error('Erro ao importar dados:', error);\n      alert('Formato de arquivo inválido. Por favor, selecione um arquivo JSON válido.');\n    }\n  };\n\n  return (\n    <KanbanContext.Provider value={{ state, dispatch, exportData, importData }}>\n      {children}\n    </KanbanContext.Provider>\n  );\n};\n\n// Hook para usar o contexto\nexport const useKanban = (): KanbanContextProps => {\n  const context = useContext(KanbanContext);\n  if (!context) {\n    throw new Error('useKanban deve ser usado dentro de um KanbanProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}